package com.gep;

import java.util.List;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @gep
//  @ File Name : GeneExpress.java
//  @ Date : 2013/4/5
//  @ Author : @shenzhan
//
//

/**
 * 基因表达
 * 计算基因的值
**/
public class Expression {
	 
   private FunctionSet Fun;
   private double[] Data;
   private double[] GeneData;  //填充数据 的
   
   private int nValidLen;
   private int GeneLength;
   private int GeneCount;
  
	
   
   public Expression(){
	   Fun=new FunctionSet();
	   this.GeneLength=GepProcess.GeneLength;
	   this.GeneCount=GepProcess.GeneCount;
	   
   }
	/**
	 * 获取基因表达的计算值
	**/
	public double GetValue(Individual Indiv ,double[] Data) {
		GeneData=new double[Indiv.Chrom.size()];
	   this.Data=Data;
	    
	   int i;
	   double res=0;
	   //计算每个基因的值  连接函数使用 +  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	   for(i=0;i<this.GeneCount;++i){
		    List<String> listGene=Indiv.Chrom.subList(i*GeneLength, i*GeneLength+GeneLength);
		    res+=GetGeneValue(listGene);                              
	   }
	   return res;		
	
	}
	
	/**
	 *  计算每个基因的值
	 * @param Gene
	 */
	private double GetGeneValue(List<String> Gene) {
		  this.GetValidLength(Gene);
		  this.FillData(Gene);
		  int nButton=this.nValidLen;
		  int nParamCount;
		  int j,k;
		  int i=nButton-1;
		  for(;i>=0;--i){ //从后向前计算
			    nParamCount=Fun.GetParamCount(Gene.get(i));
			    if(nParamCount>0){
			    	   double[] dData=new double[nParamCount];
			    	   k=0;
			    	   for( j=nButton-nParamCount;j<nButton;++j){
			    		   dData[k++]=this.GeneData[j];
			    	   }
			    	   this.GeneData[i]=Fun.GetResult(Gene.get(i), dData);
			    	   nButton-=nParamCount;
			    }
		  }
	   return GeneData[0];
	}
	
	/**
	 * 计算基因的有效长度
	 * @return
	 */
	private  void GetValidLength(List<String> Gene){
		 int i=0;
		 int nValidLen=1;
		 int nParam;
		 do{
			   nParam=Fun.GetParamCount(Gene.get(i));
			   nValidLen+=nParam;
			   ++i;
		 }while(i<nValidLen);
		 this.nValidLen= nValidLen;
	}
	
	/**
	 * 填充数据
	 * @param Gene
	 */
	private void FillData(List<String> Gene) {
	      for(int i=0;i<this.nValidLen;++i){
	    	    int nParam=Fun.GetParamCount(Gene.get(i));
	    	    if(0==nParam){
	    	    	  String sNum=Gene.get(i);
	    	    	  int nIndex=Integer.parseInt(sNum);
	    	    	  GeneData[i]=Data[nIndex];
	    	    }
	      }
	}
	
	public int GetIndivValidLen(Individual Indiv ){
		  int i;
		   int res=0;
		   //计算每个基因的值  连接函数使用 +  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		   for(i=0;i<this.GeneCount;++i){
			    List<String> listGene=Indiv.Chrom.subList(i*GeneLength, i*GeneLength+GeneLength);
			    GetValidLength(listGene) ;                 
			    res+=this.nValidLen;
		   }
		   return res;		
	}
	
	/**
	 * 计算使用到的属性的个数
	 * @param Indiv
	 * @return
	 */
	public int GetAttriNum(Individual Indiv){
		
		 int i;
		   int res=0;
		   //计算每个基因的值  连接函数使用 +  //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		   for(i=0;i<this.GeneCount;++i){
			    List<String> listGene=Indiv.Chrom.subList(i*GeneLength, i*GeneLength+GeneLength);
			    GetValidLength(listGene) ;                 
			    int nLen=this.nValidLen;
			    for(int j=0; j<nLen;++j){
			    	if(0==Fun.GetParamCount(listGene.get(j))){
			    		++res;
			    	}
			    }
			    
		   }
		   return res;	
	}
	
}
